import dash
from dash import dcc, html, callback_context
from dash.dependencies import Input, Output
import pandas as pd
import plotly.graph_objs as go

import plotly.express as px

import om_extract


# get list of sites and locations
scatter_geo_df = pd.read_csv('./siteList.csv' ,skipinitialspace=True,usecols= ['site','lat','lon'])

params = ['temperature_2m','cloud_cover']



# Initialize the Dash app
app = dash.Dash(__name__)

# App layout
app.layout = html.Div(children=[
    html.H1(children='Time Series Line Plot and Scatter Geo Plot'),
    html.Div(className='row', children=[
        html.Div(className='six columns', children=[
            dcc.Graph(
                id='scatter-geo-plot',
                figure={
                    'data': [
                        go.Scattergeo(
                            lon=scatter_geo_df['lon'],
                            lat=scatter_geo_df['lat'],
                            text=scatter_geo_df['site'],
                            mode='markers',
                            marker=dict(size=10)
                        )
                    ],
                    'layout': go.Layout(
                        title='Scatter Geo Plot',
                        geo=dict(showland=True)
                    )
                }
            ),
        ]),
        html.Div(className='six columns', children=[
            dcc.Graph(
                id='time-series-plot',
                figure={}
            )
        ]),
    ]),
    html.Div(className='row', children=[
        html.Div(className='six columns', children=[
            dcc.Dropdown(
                id='site-dropdown',
                options=[
                    {'label': site, 'value': site} for site in scatter_geo_df['site']
                ],
                value='Brisbane'  # Default value
            ),
        ]),
        html.Div(className='six columns', children=[
            dcc.Dropdown(
                id='column-dropdown',
                options=[
                    {'label': column, 'value': column} for column in params
                ],
                value=params[0],  # Default value
            ),
        ]),
    ]),
])



# Callback to update the plot based on dropdown selection
@app.callback(
    Output('time-series-plot', 'figure'),
    [Input('site-dropdown', 'value'),
     Input('column-dropdown', 'value')]
)
def update_plot(selected_site, selected_column):

    mySite = scatter_geo_df[scatter_geo_df['site'] == selected_site]

    # Get data for the selected site
    df = om_extract.getData( [str(mySite.lat.values[0])] , [str(mySite.lon.values[0])]  ,[selected_site])

    # Use Plotly Express to create line plots for each column
    fig = px.line(df, x=df.index, y=df.columns[[selected_column in c for c in df.columns]], title=f'Time Series Line Plot - {selected_site}')

    return fig

# Callback to update dropdown selection based on marker click
@app.callback(
    Output('site-dropdown', 'value'),
    [Input('scatter-geo-plot', 'clickData')]
)
def update_dropdown(clickData):
    if clickData is None:
        return 'Brisbane'
    else:
        selected_site = clickData['points'][0]['text']
        return selected_site

# Run the app
if __name__ == '__main__':
    app.run_server(debug=True)
